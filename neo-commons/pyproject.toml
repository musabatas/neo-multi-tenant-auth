[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neo-commons"
version = "0.1.0"
description = "Enterprise-grade shared library for NeoMultiTenant platform"
authors = [
    {name = "NeoMultiTenant Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.11.7,<3.0",
    "pydantic-settings>=2.10.1,<3.0",
    
    # Database
    "asyncpg>=0.30.0,<1.0",
    
    # Caching (aioredis is archived, use redis with asyncio support)
    "redis>=6.4.0,<7.0",
    
    # Authentication
    "python-jose[cryptography]>=3.5.0,<4.0",
    "cryptography>=45.0.6,<46.0",
    "httpx>=0.28.1,<1.0",
    "python-keycloak>=4.0.0,<5.0",
    "PyJWT>=2.8.0,<3.0",
    
    # FastAPI Integration
    "fastapi>=0.116.1,<1.0",
    "uvicorn[standard]>=0.35.0,<1.0",
    "scalar-fastapi>=1.2.3,<2.0",
    
    # Utilities
    "python-multipart>=0.0.20,<1.0",
    "email-validator>=2.2.0,<3.0",
    
    # Logging and Monitoring
    "structlog>=25.4.0,<26.0",
    "prometheus-client>=0.22.1,<1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.1,<9.0",
    "pytest-asyncio>=1.1.0,<2.0",
    "pytest-cov>=6.2.1,<7.0",
    "pytest-mock>=3.11.0,<4.0",
    
    # Development tools
    "black>=25.1.0,<26.0",
    "isort>=6.0.1,<7.0",
    "mypy>=1.17.1,<2.0",
    "ruff>=0.12.9,<1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]

test = [
    "pytest>=8.4.1,<9.0",
    "pytest-asyncio>=1.1.0,<2.0",
    "pytest-cov>=6.2.1,<7.0",
    "pytest-mock>=3.11.0,<4.0",
    "testcontainers[postgres]>=3.7.0",
    "testcontainers[redis]>=3.7.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/neomultitenant/neo-commons"
Documentation = "https://neo-commons.readthedocs.io/"
Repository = "https://github.com/neomultitenant/neo-commons"
"Bug Tracker" = "https://github.com/neomultitenant/neo-commons/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
neo_commons = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "redis.*",
    "aioredis.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=neo_commons",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]