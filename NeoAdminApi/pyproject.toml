[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neo-admin-api"
version = "1.0.0"
description = "Neo Multi-Tenant Platform Administration API"
authors = [
    {name = "Neo Development Team", email = "dev@neo.com"}
]
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
keywords = ["fastapi", "multi-tenant", "admin", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Neo Commons - Our shared library (already installed in dev mode)
    # "neo-commons @ file://../neo-commons",
    
    # Database & Cache
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    
    # Authentication & Security
    "python-keycloak>=3.7.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Utilities
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "httpx>=0.25.0",
    
    # System Monitoring (for neo-commons performance middleware)
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    
    # Code Quality
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    
    # Development
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/neo/neo-admin-api"
Documentation = "https://docs.neo.com/admin-api"
Repository = "https://github.com/neo/neo-admin-api"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "keycloak.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-ra -q --strict-markers --strict-config"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/main.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]